#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <dirent.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "grep.h"
int max = 1000;
typedef struct counter {
	int options;
	int files;
	int other;
	int directories;
}counter; 
counter *c;
input *ip;
int main(int argc, char *argv[]) {
	int i;
	c = (counter *)malloc(sizeof(counter));
	set = (set_option *)malloc(sizeof(set_option));
	set -> print_line_number = OFF;
	set -> print_file_name = OFF; 
	set -> case_insensitive = OFF;
	set -> print_max_lines = OFF;
	set -> row = set -> column = 0;
	set -> dir_name[0] = NULL;
	set -> file_name = NULL;
	init_print_result = OFF;
	choice = OFF;	
	for(i = 1; i <= (c -> options); i++) {
		if(strcmp(argv[i], "-e") != 0 && strcmp(argv[i], "-i") != 0 && strcmp(argv[i], "-y") != 0 && strcmp(argv[i], "-v") != 0 &&
		   strcmp(argv[i], "-w") != 0 && strcmp(argv[i], "-x") != 0 && strcmp(argv[i], "-c") != 0 && strcmp(argv[i], "-m") != 0 &&
	           strcmp(argv[i], "-o") != 0 && strcmp(argv[i], "-n") != 0 && strcmp(argv[i], "-G") != 0 && strcmp(argv[i], "-r") != 0 &&                 strcmp(argv[i], "-h") != 0 && strcmp(argv[i], "-H") != 0 && strcmp(argv[i], "-l") != 0 && strcmp(argv[i], "-L") != 0 &&                 strcmp(argv[i], "--help") !=  0) {
			printf("Usage: grep [OPTION]... PATTERN [FILE]...\nTry 'grep --help' for more information.\n");
			return EINVAL;
		}
		if(strcmp(argv[i], "-m") == 0) {
			i++;
		}
	}
	count_function(argc, argv);
	method_select(argc, argv);
	free(c);
	free(set -> file_name);
	free(set);
	return 0;
}

/*"count_function" counts the number of options, files and directories given by user on command line.*/
void count_function(int n, char **argv) {
	int i, flag = 0, recurse_flag = 0;
	(c -> options) = 0;
	(c -> files) = 0;
	(c -> other) = 0;
	(c -> directories) = 0;
	for(i = 1; i < n; i++) {
		if(strcmp(argv[i], "-e") == 0 || strcmp(argv[i], "-i") == 0 || strcmp(argv[i], "-y") == 0 || strcmp(argv[i], "-v") == 0 ||
		   strcmp(argv[i], "-w") == 0 || strcmp(argv[i], "-x") == 0 || strcmp(argv[i], "-c") == 0 || strcmp(argv[i], "-m") == 0 ||
		   strcmp(argv[i], "-o") == 0 || strcmp(argv[i], "-n") == 0 || strcmp(argv[i], "-G") == 0 || strcmp(argv[i], "-r") == 0 ||                 strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "-H") == 0 || strcmp(argv[i], "-l") == 0 || strcmp(argv[i], "-L") == 0   ||                 strcmp(argv[i], "--help") == 0                  ) {
		   	(c -> options)++;
		   	if(strcmp(argv[i], "-r") == 0) {
		   		recurse_flag = 1;
		   	}
		   	else if(strcmp(argv[i], "-m") == 0) {
		   		i++;
		   		(c -> other)++;
		   	}
		}
		else {
			if(flag == 0) {
				flag = 1;
			}
			else {
				if(recurse_flag == 1) {
					(c -> directories)++;
				}
				else {
					(c -> files)++;
				}
			}
		}
	}
}	

/*"readline" reads a line of maximum length 1000 and returns 0 if a line is read, 1 if EOF is reached and -1 on error.*/
int readline(char *file, char *str) {
	FILE *fp;
	char ch;
	int i = 0, flag = 0, error, j;
	static int count = 0;
	fp = fopen(file, "r");
	if(fp == NULL) {
		return -1;
	}
	error = fseek(fp, count, SEEK_SET);
	if(error == -1) {
		return -1;
	}
	while(1) {
		j = fread(&ch, 1, 1, fp);
		if(j == 0) {
			flag = 1;
			break;
		}
		else if(ch == '\n') {
			str[i++] = '\n';
			count++;
			break;		
		}
		else {
			str[i++] = ch;
			count++;
		}
	}
	if(flag !=1) {
		str[i] = '\0';
	}
	fclose(fp);
	if(flag == 1) {
		count = 0;
	}
	return flag;
}

/*"get_file_type" checks whether the file input by user is text or binary. It returns 1 if file is binary and returns 0 if the file is text. It returns -1 on error.*/
int get_file_type(char *file) {
	FILE *fp;
	char ch;
	fp = fopen(file, "r");
	if(fp == NULL) {
		printf("Error:%s:No such file or directory\n", file);
		return -1;
	}
	while(fscanf(fp, "%c", &ch) != EOF) {
		if(ch == '\0') {
			fclose(fp);
			return 1;
		}
	}
	fclose(fp);
	return 0;
}	

/*"print_help" prints help if the option "--help" is given.*/
void print_help(void) {
	FILE *fp; 
	char *file = "help.txt", ch;
	fp = fopen(file, "r");
	while(fread(&ch, 1, 1, fp)) {
		printf("%c", ch);
	}
	fclose(fp);
}

/*"method_select" determins the mode of operation i.e. normal, recursive or just printing help menu.*/
void method_select(int argc, char **argv) {
	int i;
	ip = (input *)malloc(sizeof(input)); 
	if(ip == NULL) {
		printf("Memory Full.\n");
		exit(0);
	}
	if(strcmp(argv[1], "-r") == 0) {	
		option_file_sort(argc, argv);
		if(set -> dir_name[0] == NULL) {
			set -> dir_name[0] = (char *)malloc(1000);
			set -> dir_name[0] = getcwd(set -> dir_name[0], 1000);
			(c -> directories)++;
		}
		for(i = 0; i < c -> directories; i++) {
			recursive_grep(set -> dir_name[i]);
		}
	}
	else if(strcmp(argv[1], "--help") == 0) {
		print_help();
	}
	else {
		option_file_sort(argc, argv);
		option_select(ip);
	}
	free(ip -> option);
	free(ip -> file);
	free(ip -> pattern);
	free(ip);
}

/*"option_file_sort" function sorts the option according to their preference and stores them in the array "option" in structure "input". It also stores text files in "file" array and assigns a value of "file_count". if binary file is detected, it  is simply skipped.*/
void option_file_sort(int argc, char **argv) {
	int i, j, file_type, count_bin_files = 0, recurse_flag = 0;
	ip -> option = (char **)malloc(8  * sizeof(char *));
	ip -> file = (char **)malloc((c -> files) * sizeof(char *));
	ip -> pattern = (char *)malloc(32);
	if(ip -> option == NULL || ip -> file == NULL || ip -> pattern == NULL) {
		printf("Memory Full.\n");
		exit(0);
	}
	for(i = 0; i < 8; i++) {
		ip -> option[i] = NULL;
	}
	if(c -> options == 0) {
		i = 1;
	}
	else { 
		for(i = 1; (c -> options == 0) ? i < 2 : (i <= (c -> options + c -> other)); i++) {
			if(strcmp(argv[i], "-r") == 0) {
				recurse_flag = 1;
				continue;
			}
			if(c -> options == 1 || c -> options == 0) {
				ip -> option[0] = (char *)malloc(8);
				if(ip -> option[0] == NULL) {
					printf("Memory Full\n");
					exit(0);
				}
				strcpy(ip -> option[0], argv[i]);
				if(strcmp(argv[i], "-m") == 0) {
					temp_number = i + 1;
				}
			}
			else {
				if(strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "-H") == 0 || strcmp(argv[i] ,"-n") == 0) {
					ip -> option[0] = (char *)malloc(8);
					if(ip -> option[0] == NULL) {
						printf("Memory Full\n");
						exit(0);
					}
					strcpy(ip -> option[0], argv[i]);
					
				}
				else if(strcmp(argv[i], "-v") == 0) {
					ip -> option[1] = (char *)malloc(8);
					if(ip -> option[1] == NULL) {
						printf("Memory Full\n");
						exit(0);
					}
					strcpy(ip -> option[1], argv[i]);
				}
				else if(strcmp(argv[i], "-i") == 0 || strcmp(argv[i], "-y") == 0) {
					ip -> option[2] = (char *)malloc(8);
					if(ip -> option[2] == NULL) {
						printf("Memory Full\n");
						exit(0);
					}
					strcpy(ip -> option[2], argv[i]);
				}
				else if(strcmp(argv[i], "-G") == 0 || strcmp(argv[i], "-o") == 0 || strcmp(argv[i], "-x") == 0 || strcmp(argv[i], "-w") == 0) {
					ip -> option[3] = (char *)malloc(8);
					if(ip -> option[3] == NULL) {
						printf("Memory Full\n");
						exit(0);
					}
					strcpy(ip -> option[3], argv[i]);
				}
				else if(strcmp(argv[i], "-c") == 0) {
					ip -> option[4] = (char *)malloc(8);
					if(ip -> option[4] == NULL) {
						printf("Memory Full\n");
						exit(0);
					}
					strcpy(ip -> option[4], argv[i]);
				}
			}
		}
	}
	strcpy(ip -> pattern, argv[i]);
	for(i = 0; i < 7; i++) {
		if(ip -> option[i] == NULL) {
			j = i + 1;
			if(ip -> option[j] != NULL) {
				ip -> option[i] = (char *)malloc(8);
				if(ip -> option[i] == NULL) {
					printf("Memory Full.\n");
					exit(0);
				} 
				strcpy(ip -> option[i], ip -> option[j]);
				free(ip -> option[j]);
				ip -> option[j] = NULL;
			}
			else {
				while(j < 8 && ip -> option[j] == NULL) {
					j++;
				}
				if(j == 8) {
					break;
				}
				else {
					ip -> option[i] = (char *)malloc(8);
					if(ip -> option[i] == NULL) {
						printf("Memory Full.\n");
						exit(0);
					}
					strcpy(ip -> option[i], ip -> option[j]);
					free(ip -> option[j]);
					ip -> option[j] = NULL;
				}
			}
		} 	 
	}   		
	j = 0;
	for(i = ((c -> options) + (c -> other) + 2); i < ((c -> options) + (c -> other) + 2 + (c -> files) + (c -> directories)); i++) {
		if(recurse_flag == 1) {
			set -> dir_name[j] = (char *)malloc(1000);
			if(set -> dir_name[j] == NULL) {
				printf("Memory Full.\n");
				exit(0);
			}
			strcpy(set -> dir_name[j], argv[i]);
			j++;
			continue;
		}
		file_type = get_file_type(argv[i]);
		if(file_type == -1) {
			exit(0);
		}
		else if(file_type == 1) {
			count_bin_files++;
			continue;
		}
		else {
			ip -> file[j] = (char *)malloc(1000);
			if(ip -> file[j] == NULL) {
				printf("Memory Full.\n");
				exit(0);
			}
			strcpy(ip -> file[j], argv[i]);
		}
		j++;
	}
	(ip -> file_count) = c -> files - count_bin_files;
	if(recurse_flag == 1) {
		(c -> options)--;
	} 
}

/*"recursive_grep" reads the given directory and its subdirectories and searches for a pattern in all present text files.*/ 
void recursive_grep(char *directory) {
	int i, file_type;
	char *dir, *file;
	input *ip2;
	DIR *dp;
	struct dirent *ep;
	ip2 = (input *)malloc(sizeof(input));
	if(ip2 == NULL) {
		printf("Memory Full.\n");
		exit(0);
	}
	ip2 -> option = (char **)malloc(c -> options * sizeof(char *));
	ip2 -> file = (char **)malloc(512);
	ip2 -> pattern = (char *)malloc(32);
	if(ip2 -> option == NULL || ip2 -> file == NULL || ip2 -> pattern == NULL) {
		printf("Memory Full\n");
		exit(0);
	}
	dir = (char *)malloc(1000);
	if(dir == NULL) {
		printf("Memory Full.\n");
		exit(0);
	}
	ip2 -> file_count = 0;
	strcpy(ip2 -> pattern, ip -> pattern);
	for(i = 0; i < c -> options; i++) {
		ip2 -> option[i] = (char *)malloc(8);
		if(ip2 -> option[i] == NULL) {
			printf("Memory Full\n");
			exit(0);
		}
		strcpy(ip2 -> option[i], ip -> option[i]);
	}
	dp = opendir(directory);
	if(dp == NULL) {
		printf("Error:\n %s: No such file or directory.\n", directory);
		exit(0);
	}
	while((ep = readdir(dp))) {
		if(ep -> d_type == DT_DIR) {
			strcpy(set -> directory, directory);
			if(strcmp(ep -> d_name, ".") == 0 || strcmp(ep -> d_name, "..") == 0) {
				continue;
			} 
			strcpy(dir, directory);
			strcat(dir, "/");
			strcat(dir, ep -> d_name);
			recursive_grep(dir);
		}
		else if(ep -> d_type == DT_REG) {
			strcpy(set -> directory, directory);
			file = (char *)malloc(strlen(set -> directory) + strlen(ep -> d_name) + 2);
			if(file == NULL) {
				printf("Memory Full.\n");
				exit(0);
			}
			strcpy(file, directory);
			strcat(file, "/");
			strcat(file, ep -> d_name);
			file_type = get_file_type(file);
			if(file_type == -1) {
				exit(0);
			}
			else if(file_type == 1) {
				continue;
			}
			(ip2 -> file_count)++;	
			ip2 -> file[(ip2 -> file_count) - 1] = (char *)malloc(1000);
			if(ip2 -> file[(ip2 -> file_count) - 1] == NULL) {
				printf("Memory Full.\n");
				exit(0);
			}
			strcpy(ip2 -> file[(ip2 -> file_count) - 1], file);
			free(file);
		}
	} 
	set -> print_file_name = ON;
	option_select(ip2);
	for(i = 0; i < ip2 -> file_count; i++) {
		free(ip2 -> file[i]);
	}
	for(i = 0; i < c -> options; i++) {
		free(ip2 -> option[i]);
	}
	free(ip2 -> pattern); 
	free(ip2 -> file);
	free(ip2 -> option);
	free(ip2);
	free(dir);
}		 

/*"option_select" works as a filter for operations of grep. It operates one operation a time on all input text files and produces the result.*/
void option_select(input *ip) {
	int i, j, k, print_flag = 0, flag = 0, temp, mode;
	char *str;
	set -> file_name = NULL;
	str = (char *)malloc(max);
	if(str == NULL) {
		printf("Memory Full\n");
		exit(0);
	}
	mode = normal;
	printf("%d\t%d\t%d\n", c->options, c->other, c->files);
	/*for(i = 0; i < c->options; i++)
		printf("%s\n", ip->option[i]);
	for(i = 0; i < c-> files; i++) 
		printf("%s\n", ip -> file[i]);*/ 
	for(k = 0; (c -> options == 0) ? k < 1 : (k < (c -> options + c -> other)); k++) {	
		 for(j = 0; j < (ip -> file_count); j++) {
			if((ip -> file_count) != 1 || set -> print_file_name == ON) {
				(set -> file_name) = (char *)malloc(strlen(ip -> file[j]) + 1);
				if(set -> file_name == NULL) {
					printf("Memory Full\n");
					exit(0);
				}
				strcpy((set -> file_name), ip -> file[j]);
				(set -> print_file_name) = ON;
			}
			line_count = 0;
			set -> row = set -> column = set -> temp = 0;
			while(1){
				i = readline(ip -> file[j], str);
				if(i == -1) {
					printf("Error:%s:No such file or directory.\n", ip -> file[j]);
					exit(0);
				}
				if(i == 1) {
					break;
				} 
				line_count++;
				if(c -> options == 0) {
					normal_grep(str, ip -> pattern, mode);
					print_flag = 1;
				}				
				else if((c -> options) == 1) {
					if(strcmp(ip -> option[k], "-G") == 0) {
						normal_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-c") == 0) {
						normal_grep(str, ip -> pattern, mode);
						print_flag = 2;
					}
					else if(strcmp((ip -> option[k]), "-n") == 0) {
						(set -> print_line_number) = ON;
						normal_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-m") == 0) {
						if(flag == 0) {
							set -> print_max_lines = ON;
							set -> max_lines = atoi(ip -> option[temp_number - 1]);
							flag = 1;
						}
						normal_grep(str, ip -> pattern, mode);
						print_flag = 3;
					}
					else if(strcmp((ip -> option[k]), "-v") == 0) {
						mode = inverse;
						normal_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}	
					else if(strcmp((ip -> option[k]), "-o") == 0) {
						normal_grep(str, ip -> pattern, mode);
						choice = only_matching;
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-x") == 0) {
						matching_lines(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-i") == 0 || strcmp(ip -> option[k], "-y") == 0) {
						set -> case_insensitive = ON;
						normal_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-w") == 0) {
						print_word_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-h") == 0) {
						set -> print_file_name = OFF;
						normal_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-H") == 0) {
						set -> print_file_name = ON;
						if(ip -> file_count == 1) {
							set -> file_name = (char *)malloc(strlen(ip -> file[j]) + 1);
							if(set -> file_name == NULL) {
								printf("Memory Full\n");
								exit(0);
							}
							strcpy(set -> file_name, ip -> file[j]);
						}
						normal_grep(str, ip -> pattern, mode);
						print_flag = 1;
					}
					else if(strcmp((ip -> option[k]), "-l") == 0) {
						if(ip -> file_count == 1) {
							set -> file_name = (char *)malloc(strlen(ip -> file[j]) + 1);
							if(set -> file_name == NULL) {
								printf("Memory Full\n");
								exit(0);
							}
							strcpy(set -> file_name, ip -> file[j]);
						}
						temp = file_with_match(str, ip -> pattern, mode);
						if(temp == 1) {
							break;
						}
					} 
					else if(strcmp((ip -> option[k]), "-L") == 0) {
						if(ip -> file_count == 1) {
							set -> file_name = (char *)malloc(strlen(ip -> file[j]) + 1);
							if(set -> file_name == NULL) {
								printf("Memory Full\n");
								exit(0);
							}
							strcpy(set -> file_name, ip -> file[j]);
						}
						temp = file_without_match(str, ip -> pattern, mode);
						if(temp == 1) {
							print_flag = 4;
						}
						else {
							print_flag = 0;
							break;
						}
					}		
				}
				else {
					if(ip -> option[i] == NULL) {
						continue;
					}
					else {
						if(strcmp(ip -> option[k], "-h") == 0) {
							set -> print_file_name = OFF;
						}
						else if(strcmp(ip -> option[k], "-H") == 0) {
							set -> print_file_name = ON;
							if(ip -> file_count == 1) {
								set -> file_name = (char *)malloc(strlen(ip -> file[j]) + 1);
								if(set -> file_name == NULL) {
									printf("Memory Full\n");
									exit(0);
								}
								strcpy(set -> file_name, ip -> file[j]);
							}
						}  
						else if(strcmp(ip -> option[k], "-v") == 0) {
							printf("hello\n");
							mode = inverse;
						}
						else if(strcmp(ip -> option[k], "-i") == 0 || strcmp(ip -> option[i], "-y") == 0) {
							set -> case_insensitive = ON;
							print_flag = 1;
						}
						else if(strcmp(ip -> option[k], "-G") == 0) {
							normal_grep(str, ip -> pattern, mode);
							print_flag = 1;
						}
						else if(strcmp(ip -> option[k], "-o") == 0) {
							choice = only_matching;
							print_flag = 1;
						}
						else if(strcmp(ip -> option[k], "-x") == 0) {
							matching_lines(str, ip -> pattern, mode);
							print_flag = 1;
						}
						else if(strcmp(ip -> option[k], "-w") == 0) {
							print_word_grep(str, ip -> pattern, mode);
							print_flag = 1;
						}
						else if(strcmp(ip -> option[k], "-c") == 0) {
							 print_flag = 2;
						}
						else if(strcmp(ip -> option[k], "-n") == 0) {
							set -> print_line_number = ON;
							print_flag = 1;
						}
					}
				}	 
			}
			if(print_flag == 1 && init_print_result == ON) {
				print_result();
			}
			else if(print_flag == 2) {
				count_line();
			}
			else if(print_flag == 3) {
				max_lines();
				flag = 0;
			}
			else if(print_flag == 4) {
				printf("%s%s\n", ANSI_COLOR_BLUE, set -> file_name);
			}
			print_flag = 0;
		}
		//free(set -> file_name);
	}
	free(str);
}
